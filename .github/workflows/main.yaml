name: Build and Deploy Docker Image

on:
  push:
    branches:
      - release/*
      - feature/*

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      # Check out the code
      - uses: actions/checkout@v2

      # Extract the latest tag and increase it by 1
      - name: Generate patch tag
        id: tag
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          BRANCH_PARTS=($(echo "$GITHUB_REF" | tr '/' ' '))
          VERSION=${BRANCH_PARTS[3]}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          git fetch --all --tags

          NEW_TAG=$(($(git tag | grep ^$VERSION | sort --version-sort | tail -1 | cut -d '.' -f 3) + 1))
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT


          NEW_VERSION="${VERSION}.${NEW_TAG}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

          echo "VERSION:  $VERSION"
          echo "NEW_TAG:  $NEW_TAG"
          echo "NEW_VERSION:  $NEW_VERSION"

      - name: Build
        run: |
          usingBuild=$(yq '.services.lyrics.build' docker-compose.yaml)
          if [ "$usingBuild" != "null" ]; then
            # Replace key name 'build' to 'image'
            yq e -i '(.services.lyrics.build | key) = "image"' docker-compose.yaml
          else
            echo "not using build"
          fi

          # Replace image value to actual api-test image
          yq e -i '(.services.lyrics.image = "test-app")' docker-compose.yaml
          # Delete mongo's service volume
          yq e -i 'del(.services.mongo.volumes, .volumes)' docker-compose.yaml
          
          docker build -t test-app .
          cat docker-compose.yaml
          docker-compose up -d

      - name: Tests
        run: |
          wget --tries=10 --waitretry=5 --retry-connrefused --retry-on-http-error=502 -O- http://localhost
          pushd tests
            python3 main.py
          popd
      
      - name: Login into registry
        if: startsWith(github.ref, 'refs/heads/release/')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.HUB_USERNAME }}
          password: ${{ secrets.HUB_PASSWORD }}

      - name: Publish To HUB
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          docker tag test-app ${{ secrets.HUB_USERNAME }}/lyrics:${{ steps.tag.outputs.NEW_VERSION }}
          docker push ${{ secrets.HUB_USERNAME }}/lyrics:${{ steps.tag.outputs.NEW_VERSION }}

      - name: Publish new tag
        if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          git checkout release/${{ steps.tag.outputs.VERSION }}
          git clean -f
          git tag ${{ steps.tag.outputs.NEW_VERSION }}
          git push --tags

      - name: Publish to lyrics-chart
        # if: startsWith(github.ref, 'refs/heads/release/')
        run: |
          git clone https://${{ secrets.USERNAME }}:${{ secrets.TOKEN }}@github.com/ronsha001/lyrics-chart.git
          # echo "Update chart with new app image tag: ${{ steps.tag.outputs.NEW_VERSION }}"
          git config --global user.email "you@example.com"
          git config --global user.name "IamGithubActions"
          pushd ./static
            html=$(cat index.html)
            js=$(cat index.js)
            css=$(cat main.css)
          popd
          pushd lyrics-chart/lyrics
            yq e -i '(.lyrics.image.tag = "${{ steps.tag.outputs.NEW_VERSION }}")' values.yaml
            yq e -i '(.ingress.static-files.index-html = $html)' values.yaml
            yq e -i '(.ingress.static-files.index-js = $js)' values.yaml
            yq e -i '(.ingress.static-files.main-css = $css)' values.yaml
            cat values.yaml
            # git commit -am "Github-Actions-update, version: ${{ steps.tag.outputs.NEW_VERSION }}"
            # git push origin master
          popd
